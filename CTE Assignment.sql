-- Normalisation and CTE queries

use mavenmovies;

-- Identify a table in the Sakila database that violates 1NF. Explain how you would normalize it to achieve 1NF.

/*The film table in the Sakila database violates 1NF. The special_features column contain multiple values in a single cell separated by commas. 
To transform the film table to 1NF duplicate records need to be created which will only contain atomic values of the special_features column and other columns. */

--  Choose a table in Sakila and describe how you would determine whether it is in 2NF. If it violates 2NF, explain the steps to normalize it.

/*The actor table is in 2NF because it is already in 1NF and there are no partial dependencies present. */

-- Identify a table in Sakila that violates 3NF. Describe the transitive dependencies present and outline the steps to normalize the table to 3NF.

/*No table violates 3NF*/

-- Take a specific table in Sakila and guide through the process of normalizing it from the initial unnormalized form up to at least 2NF.

/*To identify a table in the Sakila database that is denormalized, we can consider the film table. The special_features column contain multiple values in a single cell separated by commas. 
To transform the film table to 1NF duplicate records need to be created which will only contain atomic values of the special_features column and other columns.
To transform it to 2NF, a new table need to be created for the special features which will contain only the distinct special features and a primary key. This table will be called special_features.
Now a separate table need to be created called film_special_features which will have the combination of film_id and special_features_id columns, which are foreign keys and linked to film and special_features tables respectively.*/

/*Write a query using a CTE to retrieve the distinct list of actor names and the number of films they have acted in from the actor and film_actor tables.*/

with actor_films as
(
select a.first_name, a.last_name, count(fa.film_id) as film_count
from actor as a
left join film_actor as fa on a.actor_id = fa.actor_id
group by a.first_name, a.last_name
)
select *
from actor_films;

/*Use a recursive CTE to generate a hierarchical list of categories and their subcategories from the category table in Sakila.*/

-- Not possible because subcategories are not present in the category table.

/*Create a CTE that combines information from the film and language tables to display the film title, language name, and rental rate*/

with film_lang as
(
select f.title, l.name, f.rental_rate
from film as f
inner join language as l on f.language_id = l.language_id
)
select *
from film_lang;

/*Write a query using a CTE to find the total revenue generated by each customer (sum of payments) from the customer and payment tables.*/

with cust_payment as
(
select c.first_name, c.last_name, sum(p.amount) as total_revenue
from customer as c
inner join payment as p on c.customer_id = p.customer_id
group by c.first_name, c.last_name
)
select *
from cust_payment;

/*Utilize a CTE with a window function to rank films based on their rental duration from the film table.*/

with film_ranking as
(
select title, rental_duration, rank() over (order by rental_duration desc) as ranking
from film
)
select *
from film_ranking;

/*Create a CTE to list customers who have made more than two rentals, and then join this CTE with the customer table to retrieve additional customer details.*/

with cust_rentals as 
(
select c.customer_id, count(r.rental_id) as rental_count
from customer as c
inner join rental as r on c.customer_id = r.customer_id
group by c.customer_id
having count(r.rental_id) > 2
)
select c.*, rental_count
from cust_rentals as cr
inner join customer as c on cr.customer_id = c.customer_id;

/*Write a query using a CTE to find the total number of rentals made each month, considering the rental_date from the rental table.*/

with month_rentals as
(
select monthname(rental_date) as month, count(rental_id) as rental_count
from rental
group by monthname(rental_date)
)
select *
from month_rentals;

/*Use a CTE to pivot the data from the payment table to display the total payments made by each customer in separate columns for different payment methods.*/

select * 
from payment;

-- There is no payment_method column in payment table.

/*Create a CTE to generate a report showing pairs of actors who have appeared in the same film together, using the film_actor table.*/

with act_film as
(
select concat(a.first_name, " ", a.last_name) as actor_name, f.title
from actor as a
inner join film_actor as fa on a.actor_id = fa.actor_id
inner join film as f on f.film_id = fa.film_id
)
select af1.actor_name as name1, af2.actor_name as name2, af1.title
from act_film as af1
inner join act_film as af2 on af1.title = af2.title and af1.actor_name <> af2.actor_name;

/*Implement a recursive CTE to find all employees in the staff table who report to a specific manager, considering the reports_to column.*/

-- There is no reports_to column in staff table.